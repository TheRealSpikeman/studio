// services/subscriptionService.ts
'use server';

import { getFirebaseServices } from '@/lib/firebase-helpers';
import type { SubscriptionPlan } from '@/types/subscription';
import { Timestamp } from 'firebase-admin/firestore';

const PLANS_COLLECTION = 'subscriptionPlans';

/**
 * Retrieves all subscription plans from Firestore.
 * @returns {Promise<SubscriptionPlan[]>}
 */
export async function getSubscriptionPlans(): Promise<SubscriptionPlan[]> {
  const { db } = await getFirebaseServices();
  const plansRef = db.collection(PLANS_COLLECTION);
  const snapshot = await plansRef.orderBy('price').get();
  
  return snapshot.docs.map(doc => {
    const data = doc.data();
    return {
      ...data,
      id: doc.id,
      createdAt: (data.createdAt as Timestamp)?.toDate().toISOString(),
      updatedAt: (data.updatedAt as Timestamp)?.toDate().toISOString(),
    } as SubscriptionPlan;
  });
};

/**
 * Retrieves a single subscription plan by its ID from Firestore.
 * @param {string} id
 * @returns {Promise<SubscriptionPlan | null>}
 */
export async function getSubscriptionPlanById(id: string): Promise<SubscriptionPlan | null> {
  const { db } = await getFirebaseServices();
  if (!id) return null;

  const docRef = db.collection(PLANS_COLLECTION).doc(id);
  const docSnap = await docRef.get();

  if (docSnap.exists) {
    const data = docSnap.data()!;
    return {
      ...data,
      id: docSnap.id,
      createdAt: (data.createdAt as Timestamp)?.toDate().toISOString(),
      updatedAt: (data.updatedAt as Timestamp)?.toDate().toISOString(),
    } as SubscriptionPlan;
  }
  return null;
};

/**
 * Creates a new subscription plan in Firestore.
 * @param {Omit<SubscriptionPlan, 'createdAt' | 'updatedAt'>} data
 */
export async function createSubscriptionPlan(data: Omit<SubscriptionPlan, 'createdAt' | 'updatedAt'>): Promise<SubscriptionPlan> {
  const { db } = await getFirebaseServices();
  
  const { id, ...planData } = data;
  if (!id) throw new Error("Plan ID is required to create a new plan.");

  const docRef = db.collection(PLANS_COLLECTION).doc(id);
  
  const dataToSave = {
    ...planData,
    createdAt: Timestamp.now(),
    updatedAt: Timestamp.now(),
  };

  await docRef.set(dataToSave);
  
  return {
    ...data,
    id,
    createdAt: dataToSave.createdAt.toDate().toISOString(),
    updatedAt: dataToSave.updatedAt.toDate().toISOString(),
  };
};

/**
 * Updates an existing subscription plan in Firestore.
 * @param {string} id
 * @param {Partial<Omit<SubscriptionPlan, 'id'>>} data
 */
export async function saveSubscriptionPlan(id: string, data: Partial<Omit<SubscriptionPlan, 'id'>>): Promise<void> {
    const { db } = await getFirebaseServices();

    const docRef = db.collection(PLANS_COLLECTION).doc(id);
    await docRef.update({
        ...data,
        updatedAt: Timestamp.now(),
    });
};

/**
 * Deletes a subscription plan from Firestore.
 * @param {string} id
 */
export async function deleteSubscriptionPlan(id: string): Promise<void> {
    const { db } = await getFirebaseServices();
    
    const docRef = db.collection(PLANS_COLLECTION).doc(id);
    await docRef.delete();
};

/**
 * Retrieves all subscriptions for a specific user.
 * Final test case for the new robust architecture.
 * @param {string} userId
 */
export async function getUserSubscriptions(userId: string) {
  try {
    const { db } = await getFirebaseServices();
    
    const subscriptions = await db
      .collection('subscriptions')
      .where('userId', '==', userId)
      .get();
    
    return subscriptions.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error('Failed to get user subscriptions:', error);
    // Re-throwing the error allows the calling component to handle it, e.g., by showing a toast.
    throw new Error('Could not retrieve user subscriptions.');
  }
}
